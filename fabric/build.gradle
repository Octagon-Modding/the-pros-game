plugins {
    id 'fabric-loom' version '+'
}

base {
    archivesName = "prosgame-${mod_version}-${minecraft_version}-fabric"
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation files("../libs/pufferfishapi-${pufferfishapiver}-${minecraft_version}-fabric.jar")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            loader_version         : loader_version
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata

tasks.register('setupFiles') {
    delete fileTree("./src/main/java/org/eu/awesomekalin/pro/mod")
    delete fileTree("./src/main/resources")

    copy {
        outputs.upToDateWhen { false }
        from "../neoforge/src/main/java/org/eu/awesomekalin/pro/mod"
        into "./src/main/java/org/eu/awesomekalin/pro/mod"
    }

    copy {
        outputs.upToDateWhen { false }
        from "../neoforge/src/main/resources"
        into "./src/main/resources"
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
